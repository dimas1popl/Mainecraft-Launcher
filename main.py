import customtkinter as ctk
import minecraft_launcher_lib as mclib
import subprocess
import threading
import os
from PIL import Image, ImageTk
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")


class MinecraftLauncher(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Minecraft Launcher")
        self.geometry("900x700")
        self.minecraft_dir = os.path.join(os.getenv('APPDATA'), '.minecraft')

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(self.minecraft_dir, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(padx=20, pady=20, fill="both", expand=True)

        self.play_tab = self.tabview.add("üéÆ –ò–≥—Ä–∞—Ç—å")
        self.versions_tab = self.tabview.add("üì¶ –í–µ—Ä—Å–∏–∏")
        self.settings_tab = self.tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

        self.setup_play_tab()
        self.setup_versions_tab()
        self.setup_settings_tab()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–π
        self.load_installed_versions()
        self.load_available_versions()

    def setup_play_tab(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(self.play_tab, text="Minecraft Launcher",
                                   font=ctk.CTkFont(size=24, weight="bold"))
        title_label.pack(pady=20)

        # –§—Ä–µ–π–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏
        version_frame = ctk.CTkFrame(self.play_tab)
        version_frame.pack(pady=10, padx=20, fill="x")

        ctk.CTkLabel(version_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:",
                     font=ctk.CTkFont(weight="bold")).pack(pady=10)

        self.version_var = ctk.StringVar()
        self.version_dropdown = ctk.CTkComboBox(version_frame,
                                                variable=self.version_var,
                                                width=300)
        self.version_dropdown.pack(pady=10)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.progress_bar = ctk.CTkProgressBar(self.play_tab, height=20)
        self.progress_bar.pack(pady=5, padx=20, fill="x")
        self.progress_bar.set(0)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        self.play_button = ctk.CTkButton(self.play_tab,
                                         text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft",
                                         command=self.launch_game,
                                         height=40,
                                         font=ctk.CTkFont(size=16))
        self.play_button.pack(pady=20)

        # –ö–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∞
        console_label = ctk.CTkLabel(self.play_tab, text="–õ–æ–≥ –∑–∞–ø—É—Å–∫–∞:")
        console_label.pack(pady=(20, 5))

        self.console = ctk.CTkTextbox(self.play_tab, height=200)
        self.console.pack(pady=10, fill="both", expand=True)

    def setup_versions_tab(self):
        # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –≤–∫–ª–∞–¥–∫–∏ –≤–Ω—É—Ç—Ä–∏ –≤–∫–ª–∞–¥–∫–∏ –≤–µ—Ä—Å–∏–π
        self.versions_tabview = ctk.CTkTabview(self.versions_tab)
        self.versions_tabview.pack(fill="both", expand=True, padx=10, pady=10)

        self.installed_tab = self.versions_tabview.add("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ")
        self.available_tab = self.versions_tabview.add("–î–æ—Å—Ç—É–ø–Ω—ã–µ")

        # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        self.installed_versions_frame = ctk.CTkScrollableFrame(self.installed_tab)
        self.installed_versions_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        self.available_versions_frame = ctk.CTkScrollableFrame(self.available_tab)
        self.available_versions_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_frame = ctk.CTkFrame(self.versions_tab)
        refresh_frame.pack(fill="x", padx=10, pady=5)

        ctk.CTkButton(refresh_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                      command=self.load_all_versions).pack(side="left", padx=5)

    def setup_settings_tab(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏
        memory_frame = ctk.CTkFrame(self.settings_tab)
        memory_frame.pack(pady=10, padx=20, fill="x")

        ctk.CTkLabel(memory_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏",
                     font=ctk.CTkFont(weight="bold")).pack(pady=10)

        memory_subframe = ctk.CTkFrame(memory_frame)
        memory_subframe.pack(pady=10)

        ctk.CTkLabel(memory_subframe, text="–ú–∏–Ω–∏–º—É–º (MB):").grid(row=0, column=0, padx=5, pady=5)
        self.min_memory = ctk.CTkEntry(memory_subframe, width=100)
        self.min_memory.insert(0, "2048")
        self.min_memory.grid(row=0, column=1, padx=5, pady=5)

        ctk.CTkLabel(memory_subframe, text="–ú–∞–∫—Å–∏–º—É–º (MB):").grid(row=0, column=2, padx=5, pady=5)
        self.max_memory = ctk.CTkEntry(memory_subframe, width=100)
        self.max_memory.insert(0, "4096")
        self.max_memory.grid(row=0, column=3, padx=5, pady=5)

        # –ü—É—Ç—å –∫ –∏–≥—Ä–µ
        path_frame = ctk.CTkFrame(self.settings_tab)
        path_frame.pack(pady=10, padx=20, fill="x")

        ctk.CTkLabel(path_frame, text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–≥—Ä—ã",
                     font=ctk.CTkFont(weight="bold")).pack(pady=10)

        path_subframe = ctk.CTkFrame(path_frame)
        path_subframe.pack(pady=10, fill="x", padx=10)

        self.dir_entry = ctk.CTkEntry(path_subframe, width=400)
        self.dir_entry.insert(0, self.minecraft_dir)
        self.dir_entry.pack(side="left", padx=5, pady=5)

        ctk.CTkButton(path_subframe, text="–û–±–∑–æ—Ä",
                      command=self.browse_directory).pack(side="left", padx=5)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        ctk.CTkButton(self.settings_tab, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                      command=self.save_settings).pack(pady=20)

    def browse_directory(self):
        from tkinter import filedialog
        directory = filedialog.askdirectory()
        if directory:
            self.dir_entry.delete(0, "end")
            self.dir_entry.insert(0, directory)
            self.minecraft_dir = directory
            self.load_all_versions()

    def save_settings(self):
        self.minecraft_dir = self.dir_entry.get()
        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        self.load_all_versions()

    def load_all_versions(self):
        self.load_installed_versions()
        self.load_available_versions()

    def load_installed_versions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
        threading.Thread(target=self._load_installed_versions_thread, daemon=True).start()

    def _load_installed_versions_thread(self):
        try:
            versions = mclib.utils.get_installed_versions(self.minecraft_dir)
            version_ids = [v['id'] for v in versions]

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.after(0, self._update_installed_versions, versions)
            self.after(0, self._update_version_dropdown, version_ids)

        except Exception as e:
            self.after(0, self.log, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π: {str(e)}")

    def _update_installed_versions(self, versions):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –≤ UI"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
        for widget in self.installed_versions_frame.winfo_children():
            widget.destroy()

        if not versions:
            label = ctk.CTkLabel(self.installed_versions_frame,
                                 text="–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
            label.pack(pady=20)
            return

        for version in versions:
            self._create_version_card(version, self.installed_versions_frame, True)

    def load_available_versions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
        threading.Thread(target=self._load_available_versions_thread, daemon=True).start()

    def _load_available_versions_thread(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π
            version_list = mclib.utils.get_version_list()
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –≤–µ—Ä—Å–∏–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            recent_versions = version_list[:20]

            self.after(0, self._update_available_versions, recent_versions)

        except Exception as e:
            self.after(0, self.log, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π: {str(e)}")

    def _update_available_versions(self, versions):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –≤ UI"""
        for widget in self.available_versions_frame.winfo_children():
            widget.destroy()

        for version in versions:
            self._create_version_card(version, self.available_versions_frame, False)

    def _create_version_card(self, version, parent, is_installed):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–µ—Ä—Å–∏–∏"""
        frame = ctk.CTkFrame(parent)
        frame.pack(fill="x", pady=5, padx=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
        info_frame = ctk.CTkFrame(frame)
        info_frame.pack(side="left", fill="x", expand=True, padx=5, pady=5)

        ctk.CTkLabel(info_frame, text=version['id'],
                     font=ctk.CTkFont(weight="bold")).pack(anchor="w")

        version_type = version.get('type', 'unknown')
        color = "green" if version_type == "release" else "yellow" if version_type == "snapshot" else "gray"
        ctk.CTkLabel(info_frame, text=version_type, text_color=color).pack(anchor="w")

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        btn_frame = ctk.CTkFrame(frame)
        btn_frame.pack(side="right", padx=5, pady=5)

        if is_installed:
            ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", width=80,
                          command=lambda v=version['id']: self.delete_version(v)).pack(side="left", padx=2)
        else:
            ctk.CTkButton(btn_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", width=80,
                          command=lambda v=version['id']: self.install_version(v)).pack(side="left", padx=2)

    def _update_version_dropdown(self, version_ids):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π"""
        self.version_dropdown.configure(values=version_ids)
        if version_ids:
            self.version_var.set(version_ids[0])

    def install_version(self, version_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏"""
        threading.Thread(target=self._install_version_thread, args=(version_id,), daemon=True).start()

    def _install_version_thread(self, version_id):
        try:
            self.after(0, self.log, f"–ù–∞—á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏ {version_id}...")

            # –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            callback = {
                'setStatus': lambda status: self.after(0, self.log, f"–°—Ç–∞—Ç—É—Å: {status}"),
                'setProgress': lambda progress: self._update_progress(progress),
                'setMax': lambda max_value: self.after(0, self.log, f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {max_value}")
            }

            mclib.install.install_minecraft_version(version_id, self.minecraft_dir, callback=callback)
            self.after(0, self.log, f"–í–µ—Ä—Å–∏—è {version_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            self.after(0, self.load_all_versions)
            self.after(0, self.progress_bar.set, 0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä

        except Exception as e:
            self.after(0, self.log, f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {version_id}: {str(e)}")
            self.after(0, self.progress_bar.set, 0)

    def _update_progress(self, progress):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        # progress - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—É—â–∏–π, –æ–±—â–∏–π) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
        if isinstance(progress, tuple) and len(progress) == 2:
            current, total = progress
            if total > 0:
                percentage = current / total
                self.progress_bar.set(percentage)
                self.after(0, self.log, f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} ({percentage * 100:.1f}%)")
        else:
            # –ï—Å–ª–∏ progress - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç
            self.progress_bar.set(progress / 100 if progress > 1 else progress)

    def delete_version(self, version_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏"""
        try:
            mclib.install.uninstall_version(version_id, self.minecraft_dir)
            self.log(f"–í–µ—Ä—Å–∏—è {version_id} —É–¥–∞–ª–µ–Ω–∞!")
            self.load_all_versions()
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {version_id}: {str(e)}")

    def launch_game(self):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        threading.Thread(target=self._launch_thread, daemon=True).start()

    def _launch_thread(self):
        version = self.version_var.get()
        if not version:
            self.log("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
            return

        try:
            self.after(0, self.play_button.configure, {"state": "disabled", "text": "–ó–∞–ø—É—Å–∫..."})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –≤–µ—Ä—Å–∏—è
            installed_versions = mclib.utils.get_installed_versions(self.minecraft_dir)
            version_ids = [v['id'] for v in installed_versions]

            if version not in version_ids:
                self.log(f"‚ùå –í–µ—Ä—Å–∏—è {version} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
                self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})
                return

            options = {
                'username': 'Player',
                'uuid': '',
                'token': '',
                'jvmArguments': [
                    f"-Xmx{self.max_memory.get()}M",
                    f"-Xms{self.min_memory.get()}M"
                ]
            }

            self.log(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É {version}...")
            command = mclib.command.get_minecraft_command(version, self.minecraft_dir, options)

            self.log("üöÄ –ó–∞–ø—É—Å–∫ Minecraft...")
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1,
                                       universal_newlines=True)

            for line in iter(process.stdout.readline, ''):
                if line:
                    self.log(line.strip())

            process.stdout.close()
            process.wait()

            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})

        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})

    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.console.insert("end", message + "\n")
        self.console.see("end")


if __name__ == "__main__":
    app = MinecraftLauncher()
    app.mainloop()