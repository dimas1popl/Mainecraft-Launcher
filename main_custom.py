import customtkinter as ctk
import minecraft_launcher_lib as mclib
import subprocess
import threading
import os
import json
from PIL import Image, ImageTk
import requests
import zipfile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class MinecraftLauncher(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Minecraft Launcher")
        self.geometry("900x700")
        self.minecraft_dir = os.path.join(os.getenv('APPDATA'), '.minecraft')
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(self.minecraft_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(padx=20, pady=20, fill="both", expand=True)
        
        self.play_tab = self.tabview.add("üéÆ –ò–≥—Ä–∞—Ç—å")
        self.versions_tab = self.tabview.add("üì¶ –í–µ—Ä—Å–∏–∏")
        self.settings_tab = self.tabview.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.custom_tab = self.tabview.add("üîß –ö–∞—Å—Ç–æ–º–Ω—ã–µ")
        
        self.setup_play_tab()
        self.setup_versions_tab()
        self.setup_settings_tab()
        self.setup_custom_tab()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–π
        self.load_installed_versions()
        self.load_available_versions()
        self.load_custom_versions()

    def setup_play_tab(self):
        title_label = ctk.CTkLabel(self.play_tab, text="Minecraft Launcher", 
                                  font=ctk.CTkFont(size=24, weight="bold"))
        title_label.pack(pady=20)
        
        version_frame = ctk.CTkFrame(self.play_tab)
        version_frame.pack(pady=10, padx=20, fill="x")
        
        ctk.CTkLabel(version_frame, text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é:", 
                    font=ctk.CTkFont(weight="bold")).pack(pady=10)
        
        self.version_var = ctk.StringVar()
        self.version_dropdown = ctk.CTkComboBox(version_frame, 
                                               variable=self.version_var,
                                               width=300)
        self.version_dropdown.pack(pady=10)
        
        self.play_button = ctk.CTkButton(self.play_tab, 
                                        text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft", 
                                        command=self.launch_game,
                                        height=40,
                                        font=ctk.CTkFont(size=16))
        self.play_button.pack(pady=20)
        
        console_label = ctk.CTkLabel(self.play_tab, text="–õ–æ–≥ –∑–∞–ø—É—Å–∫–∞:")
        console_label.pack(pady=(20, 5))
        
        self.console = ctk.CTkTextbox(self.play_tab, height=200)
        self.console.pack(pady=10, fill="both", expand=True)

    def setup_versions_tab(self):
        self.versions_tabview = ctk.CTkTabview(self.versions_tab)
        self.versions_tabview.pack(fill="both", expand=True, padx=10, pady=10)
        
        self.installed_tab = self.versions_tabview.add("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ")
        self.available_tab = self.versions_tabview.add("–î–æ—Å—Ç—É–ø–Ω—ã–µ")
        
        self.installed_versions_frame = ctk.CTkScrollableFrame(self.installed_tab)
        self.installed_versions_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        self.available_versions_frame = ctk.CTkScrollableFrame(self.available_tab)
        self.available_versions_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        refresh_frame = ctk.CTkFrame(self.versions_tab)
        refresh_frame.pack(fill="x", padx=10, pady=5)
        
        ctk.CTkButton(refresh_frame, text="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
                     command=self.load_all_versions).pack(side="left", padx=5)

    def setup_settings_tab(self):
        memory_frame = ctk.CTkFrame(self.settings_tab)
        memory_frame.pack(pady=10, padx=20, fill="x")
        
        ctk.CTkLabel(memory_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏", 
                    font=ctk.CTkFont(weight="bold")).pack(pady=10)
        
        memory_subframe = ctk.CTkFrame(memory_frame)
        memory_subframe.pack(pady=10)
        
        ctk.CTkLabel(memory_subframe, text="–ú–∏–Ω–∏–º—É–º (MB):").grid(row=0, column=0, padx=5, pady=5)
        self.min_memory = ctk.CTkEntry(memory_subframe, width=100)
        self.min_memory.insert(0, "2048")
        self.min_memory.grid(row=0, column=1, padx=5, pady=5)
        
        ctk.CTkLabel(memory_subframe, text="–ú–∞–∫—Å–∏–º—É–º (MB):").grid(row=0, column=2, padx=5, pady=5)
        self.max_memory = ctk.CTkEntry(memory_subframe, width=100)
        self.max_memory.insert(0, "4096")
        self.max_memory.grid(row=0, column=3, padx=5, pady=5)
        
        # –í—ã–±–æ—Ä Java
        java_frame = ctk.CTkFrame(self.settings_tab)
        java_frame.pack(pady=10, padx=20, fill="x")
        
        ctk.CTkLabel(java_frame, text="–ü—É—Ç—å –∫ Java", 
                    font=ctk.CTkFont(weight="bold")).pack(pady=10)
        
        java_subframe = ctk.CTkFrame(java_frame)
        java_subframe.pack(pady=10, fill="x", padx=10)
        
        self.java_path_entry = ctk.CTkEntry(java_subframe, width=400)
        self.java_path_entry.pack(side="left", padx=5, pady=5)
        
        ctk.CTkButton(java_subframe, text="–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", 
                     command=self.auto_detect_java).pack(side="left", padx=5)
        ctk.CTkButton(java_subframe, text="–û–±–∑–æ—Ä", 
                     command=self.browse_java).pack(side="left", padx=5)
        
        # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º Java –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.auto_detect_java()
        
        path_frame = ctk.CTkFrame(self.settings_tab)
        path_frame.pack(pady=10, padx=20, fill="x")
        
        ctk.CTkLabel(path_frame, text="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–≥—Ä—ã", 
                    font=ctk.CTkFont(weight="bold")).pack(pady=10)
        
        path_subframe = ctk.CTkFrame(path_frame)
        path_subframe.pack(pady=10, fill="x", padx=10)
        
        self.dir_entry = ctk.CTkEntry(path_subframe, width=400)
        self.dir_entry.insert(0, self.minecraft_dir)
        self.dir_entry.pack(side="left", padx=5, pady=5)
        
        ctk.CTkButton(path_subframe, text="–û–±–∑–æ—Ä", 
                     command=self.browse_directory).pack(side="left", padx=5)
        
        ctk.CTkButton(self.settings_tab, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                     command=self.save_settings).pack(pady=20)

    def setup_custom_tab(self):
        add_frame = ctk.CTkFrame(self.custom_tab)
        add_frame.pack(pady=10, padx=20, fill="x")
        
        ctk.CTkLabel(add_frame, text="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Å–±–æ—Ä–∫—É", 
                    font=ctk.CTkFont(weight="bold")).pack(pady=10)
        
        input_frame = ctk.CTkFrame(add_frame)
        input_frame.pack(pady=10, fill="x", padx=10)
        
        ctk.CTkLabel(input_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:").grid(row=0, column=0, padx=5, pady=5)
        self.custom_name = ctk.CTkEntry(input_frame, width=150)
        self.custom_name.grid(row=0, column=1, padx=5, pady=5)
        
        ctk.CTkLabel(input_frame, text="–ü—É—Ç—å –∫ jar:").grid(row=0, column=2, padx=5, pady=5)
        self.custom_jar_path = ctk.CTkEntry(input_frame, width=200)
        self.custom_jar_path.grid(row=0, column=3, padx=5, pady=5)
        
        ctk.CTkButton(input_frame, text="–û–±–∑–æ—Ä", 
                     command=self.browse_jar_file).grid(row=0, column=4, padx=5, pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        ctk.CTkLabel(input_frame, text="–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å:").grid(row=1, column=0, padx=5, pady=5)
        self.custom_main_class = ctk.CTkEntry(input_frame, width=150)
        self.custom_main_class.insert(0, "net.minecraft.client.main.Main")  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        self.custom_main_class.grid(row=1, column=1, padx=5, pady=5)
        
        ctk.CTkButton(input_frame, text="–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å", 
                     command=self.auto_detect_main_class).grid(row=1, column=2, padx=5, pady=5)
        
        # –ü–æ–ª–µ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ JVM
        ctk.CTkLabel(input_frame, text="–î–æ–ø. –∞—Ä–≥—É–º–µ–Ω—Ç—ã:").grid(row=2, column=0, padx=5, pady=5)
        self.custom_jvm_args = ctk.CTkEntry(input_frame, width=300)
        self.custom_jvm_args.insert(0, "-Djava.library.path=natives")
        self.custom_jvm_args.grid(row=2, column=1, columnspan=3, padx=5, pady=5)
        
        ctk.CTkButton(add_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–∫—É",
                     command=self.add_custom_version).pack(pady=10)
        
        self.custom_versions_frame = ctk.CTkScrollableFrame(self.custom_tab)
        self.custom_versions_frame.pack(fill="both", expand=True, padx=10, pady=10)

    def auto_detect_java(self):
        """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ Java"""
        java_path = self.find_java_executable()
        if java_path:
            self.java_path_entry.delete(0, "end")
            self.java_path_entry.insert(0, java_path)
            self.log(f"‚úÖ Java –Ω–∞–π–¥–µ–Ω–∞: {java_path}")
        else:
            self.log("‚ùå Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    def browse_java(self):
        from tkinter import filedialog
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ java.exe",
            filetypes=[("Java executable", "java.exe"), ("All files", "*.*")]
        )
        if file_path:
            self.java_path_entry.delete(0, "end")
            self.java_path_entry.insert(0, file_path)

    def auto_detect_main_class(self):
        """–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ jar-—Ñ–∞–π–ª–∞"""
        jar_path = self.custom_jar_path.get().strip()
        if not jar_path or not os.path.exists(jar_path):
            self.log("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ jar-—Ñ–∞–π–ª—É!")
            return
        
        main_class = self.extract_main_class(jar_path)
        if main_class:
            self.custom_main_class.delete(0, "end")
            self.custom_main_class.insert(0, main_class)
            self.log(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞–π–¥–µ–Ω: {main_class}")
        else:
            self.log("‚ùå –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ jar-—Ñ–∞–π–ª–µ")

    def extract_main_class(self, jar_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ jar-—Ñ–∞–π–ª–∞"""
        try:
            with zipfile.ZipFile(jar_path, 'r') as jar:
                # –ß–∏—Ç–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
                manifest_data = jar.read('META-INF/MANIFEST.MF').decode('utf-8')
                for line in manifest_data.splitlines():
                    if line.startswith('Main-Class:'):
                        return line.split(':', 1)[1].strip()
        except:
            pass
        return None

    def browse_jar_file(self):
        from tkinter import filedialog
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ jar —Ñ–∞–π–ª",
            filetypes=[("JAR files", "*.jar"), ("All files", "*.*")]
        )
        if file_path:
            self.custom_jar_path.delete(0, "end")
            self.custom_jar_path.insert(0, file_path)
            
            name = os.path.splitext(os.path.basename(file_path))[0]
            self.custom_name.delete(0, "end")
            self.custom_name.insert(0, name)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
            main_class = self.extract_main_class(file_path)
            if main_class:
                self.custom_main_class.delete(0, "end")
                self.custom_main_class.insert(0, main_class)

    def add_custom_version(self):
        name = self.custom_name.get().strip()
        jar_path = self.custom_jar_path.get().strip()
        main_class = self.custom_main_class.get().strip()
        jvm_args = self.custom_jvm_args.get().strip()
        
        if not name or not jar_path:
            self.log("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—É—Ç—å –∫ jar!")
            return
        
        if not os.path.exists(jar_path):
            self.log("‚ùå –§–∞–π–ª jar –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        if not main_class:
            self.log("‚ö†Ô∏è –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...")
            main_class = self.extract_main_class(jar_path)
            if not main_class:
                self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å!")
                return
        
        custom_versions = self.load_custom_versions_data()
        custom_versions[name] = {
            "name": name,
            "jar_path": jar_path,
            "main_class": main_class,
            "jvm_args": jvm_args,
            "type": "custom"
        }
        
        self.save_custom_versions_data(custom_versions)
        self.load_custom_versions()
        self.log(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

    def load_custom_versions_data(self):
        custom_file = os.path.join(self.minecraft_dir, "custom_versions.json")
        if os.path.exists(custom_file):
            with open(custom_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}

    def save_custom_versions_data(self, data):
        custom_file = os.path.join(self.minecraft_dir, "custom_versions.json")
        with open(custom_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

    def load_custom_versions(self):
        custom_versions = self.load_custom_versions_data()
        
        for widget in self.custom_versions_frame.winfo_children():
            widget.destroy()
        
        if not custom_versions:
            label = ctk.CTkLabel(self.custom_versions_frame, 
                               text="–ù–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å–±–æ—Ä–æ–∫")
            label.pack(pady=20)
            return
        
        for version_name, version_data in custom_versions.items():
            self._create_custom_version_card(version_data)

    def _create_custom_version_card(self, version_data):
        frame = ctk.CTkFrame(self.custom_versions_frame)
        frame.pack(fill="x", pady=5, padx=5)
        
        info_frame = ctk.CTkFrame(frame)
        info_frame.pack(side="left", fill="x", expand=True, padx=5, pady=5)
        
        ctk.CTkLabel(info_frame, text=version_data['name'], 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w")
        
        ctk.CTkLabel(info_frame, text=f"–ö–ª–∞—Å—Å: {version_data.get('main_class', '–ù–µ —É–∫–∞–∑–∞–Ω')}", 
                    text_color="gray").pack(anchor="w")
        
        ctk.CTkLabel(info_frame, text=version_data['jar_path'], 
                    text_color="gray").pack(anchor="w")
        
        btn_frame = ctk.CTkFrame(frame)
        btn_frame.pack(side="right", padx=5, pady=5)
        
        ctk.CTkButton(btn_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", width=80,
                     command=lambda v=version_data: self.launch_custom_version(v)).pack(side="left", padx=2)
        
        ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", width=80,
                     command=lambda v=version_data['name']: self.delete_custom_version(v)).pack(side="left", padx=2)

    def delete_custom_version(self, version_name):
        custom_versions = self.load_custom_versions_data()
        if version_name in custom_versions:
            del custom_versions[version_name]
            self.save_custom_versions_data(custom_versions)
            self.load_custom_versions()
            self.log(f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å–±–æ—Ä–∫–∞ '{version_name}' —É–¥–∞–ª–µ–Ω–∞!")

    def launch_custom_version(self, version_data):
        self.version_var.set(version_data['name'])
        self.launch_game()

    def browse_directory(self):
        from tkinter import filedialog
        directory = filedialog.askdirectory()
        if directory:
            self.dir_entry.delete(0, "end")
            self.dir_entry.insert(0, directory)
            self.minecraft_dir = directory
            self.load_all_versions()

    def save_settings(self):
        self.minecraft_dir = self.dir_entry.get()
        self.log("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        self.load_all_versions()

    def load_all_versions(self):
        self.load_installed_versions()
        self.load_available_versions()
        self.load_custom_versions()

    def load_installed_versions(self):
        threading.Thread(target=self._load_installed_versions_thread, daemon=True).start()

    def _load_installed_versions_thread(self):
        try:
            versions = mclib.utils.get_installed_versions(self.minecraft_dir)
            version_ids = [v['id'] for v in versions]
            
            custom_versions = self.load_custom_versions_data()
            for custom_name in custom_versions.keys():
                version_ids.append(custom_name)
            
            self.after(0, self._update_installed_versions, versions)
            self.after(0, self._update_version_dropdown, version_ids)
            
        except Exception as e:
            self.after(0, self.log, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π: {str(e)}")

    def _update_installed_versions(self, versions):
        for widget in self.installed_versions_frame.winfo_children():
            widget.destroy()
        
        if not versions:
            label = ctk.CTkLabel(self.installed_versions_frame, 
                               text="–ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
            label.pack(pady=20)
            return
        
        for version in versions:
            self._create_version_card(version, self.installed_versions_frame, True)

    def load_available_versions(self):
        threading.Thread(target=self._load_available_versions_thread, daemon=True).start()

    def _load_available_versions_thread(self):
        try:
            version_list = mclib.utils.get_version_list()
            recent_versions = version_list[:20]
            self.after(0, self._update_available_versions, recent_versions)
        except Exception as e:
            self.after(0, self.log, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π: {str(e)}")

    def _update_available_versions(self, versions):
        for widget in self.available_versions_frame.winfo_children():
            widget.destroy()
        
        for version in versions:
            self._create_version_card(version, self.available_versions_frame, False)

    def _create_version_card(self, version, parent, is_installed):
        frame = ctk.CTkFrame(parent)
        frame.pack(fill="x", pady=5, padx=5)
        
        info_frame = ctk.CTkFrame(frame)
        info_frame.pack(side="left", fill="x", expand=True, padx=5, pady=5)
        
        ctk.CTkLabel(info_frame, text=version['id'], 
                    font=ctk.CTkFont(weight="bold")).pack(anchor="w")
        
        version_type = version.get('type', 'unknown')
        color = "green" if version_type == "release" else "yellow" if version_type == "snapshot" else "gray"
        ctk.CTkLabel(info_frame, text=version_type, text_color=color).pack(anchor="w")
        
        btn_frame = ctk.CTkFrame(frame)
        btn_frame.pack(side="right", padx=5, pady=5)
        
        if is_installed:
            ctk.CTkButton(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", width=80,
                         command=lambda v=version['id']: self.delete_version(v)).pack(side="left", padx=2)
        else:
            ctk.CTkButton(btn_frame, text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", width=80,
                         command=lambda v=version['id']: self.install_version(v)).pack(side="left", padx=2)

    def _update_version_dropdown(self, version_ids):
        self.version_dropdown.configure(values=version_ids)
        if version_ids:
            self.version_var.set(version_ids[0])

    def install_version(self, version_id):
        threading.Thread(target=self._install_version_thread, args=(version_id,), daemon=True).start()

    def _install_version_thread(self, version_id):
        try:
            self.after(0, self.log, f"–ù–∞—á–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ—Ä—Å–∏–∏ {version_id}...")
            
            callback = {
                'setStatus': lambda status: self.after(0, self.log, f"–°—Ç–∞—Ç—É—Å: {status}"),
                'setProgress': lambda progress: self.after(0, self.log, f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"),
                'setMax': lambda max_value: None
            }
            
            mclib.install.install_minecraft_version(version_id, self.minecraft_dir, callback=callback)
            self.after(0, self.log, f"–í–µ—Ä—Å–∏—è {version_id} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            self.after(0, self.load_all_versions)
            
        except Exception as e:
            self.after(0, self.log, f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {version_id}: {str(e)}")

    def delete_version(self, version_id):
        try:
            mclib.install.uninstall_version(version_id, self.minecraft_dir)
            self.log(f"–í–µ—Ä—Å–∏—è {version_id} —É–¥–∞–ª–µ–Ω–∞!")
            self.load_all_versions()
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {version_id}: {str(e)}")

    def launch_game(self):
        threading.Thread(target=self._launch_thread, daemon=True).start()

    def _launch_thread(self):
        version = self.version_var.get()
        if not version:
            self.log("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
            return
        
        try:
            self.after(0, self.play_button.configure, {"state": "disabled", "text": "–ó–∞–ø—É—Å–∫..."})
            
            custom_versions = self.load_custom_versions_data()
            if version in custom_versions:
                self._launch_custom_version(custom_versions[version])
            else:
                self._launch_standard_version(version)
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})

    def _launch_standard_version(self, version):
        installed_versions = mclib.utils.get_installed_versions(self.minecraft_dir)
        version_ids = [v['id'] for v in installed_versions]
        
        if version not in version_ids:
            self.log(f"‚ùå –í–µ—Ä—Å–∏—è {version} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})
            return
        
        options = {
            'username': 'Player',
            'uuid': '',
            'token': '',
            'jvmArguments': [
                f"-Xmx{self.max_memory.get()}M",
                f"-Xms{self.min_memory.get()}M",
                "-Dfml.ignoreInvalidMinecraftCertificates=true",
                "-Dfml.ignorePatchDiscrepancies=true"
            ]
        }
        
        self.log(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–ø—É—Å–∫—É {version}...")
        command = mclib.command.get_minecraft_command(version, self.minecraft_dir, options)
        
        self._execute_game_command(command, version)

    def _launch_custom_version(self, version_data):
        jar_path = version_data['jar_path']
        main_class = version_data.get('main_class', '')
        jvm_args = version_data.get('jvm_args', '')
        
        if not os.path.exists(jar_path):
            self.log(f"‚ùå –§–∞–π–ª {jar_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})
            return
        
        if not main_class:
            self.log("‚ùå –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω!")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ Java –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        java_path = self.java_path_entry.get().strip()
        if not java_path or not os.path.exists(java_path):
            self.log("‚ùå –ü—É—Ç—å –∫ Java –Ω–µ–≤–µ—Ä–Ω—ã–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
        jvm_args_list = [
            f"-Xmx{self.max_memory.get()}M",
            f"-Xms{self.min_memory.get()}M"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã JVM
        if jvm_args:
            jvm_args_list.extend(jvm_args.split())
        
        # –î–æ–±–∞–≤–ª—è–µ–º classpath –∏ –≥–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
        jvm_args_list.extend([
            "-cp", f'"{jar_path}"',  # –ó–∞–∫–ª—é—á–∞–µ–º –ø—É—Ç—å –≤ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–µ–ª–æ–≤
            main_class
        ])
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        command = [f'"{java_path}"'] + jvm_args_list  # –ó–∞–∫–ª—é—á–∞–µ–º java_path –≤ –∫–∞–≤—ã—á–∫–∏
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        command_str = " ".join(command)
        
        self.log(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å–±–æ—Ä–∫–∏: {version_data['name']}")
        self.log(f"–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å: {main_class}")
        self.log(f"–ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command_str}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ shell=True –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
        self._execute_game_command_shell(command_str, version_data['name'])

    def _execute_game_command_shell(self, command_str, version_name):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ shell –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π —Å –ø—Ä–æ–±–µ–ª–∞–º–∏"""
        try:
            self.log(f"üöÄ –ó–∞–ø—É—Å–∫ {version_name} —á–µ—Ä–µ–∑ shell...")
            
            process = subprocess.Popen(
                command_str,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True,
                cwd=self.minecraft_dir,  # –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
                shell=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º shell –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Ç–µ–π
            )
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            while True:
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    self.log(output.strip())
            
            return_code = process.poll()
            if return_code == 0:
                self.log("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log(f"‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {return_code}")
            
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})


    def _execute_game_command(self, command, version_name):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫ —Å–ø–∏—Å–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π)"""
        try:
            self.log(f"üöÄ –ó–∞–ø—É—Å–∫ {version_name}...")
            
            process = subprocess.Popen(
                command,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True,
                cwd=self.minecraft_dir
            )
            
            while True:
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    self.log(output.strip())
            
            return_code = process.poll()
            if return_code == 0:
                self.log("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                self.log(f"‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {return_code}")
            
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
            self.after(0, self.play_button.configure, {"state": "normal", "text": "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Minecraft"})

    def find_java_executable(self):
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Java"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JAVA_HOME
        java_home = os.getenv('JAVA_HOME')
        if java_home:
            java_path = os.path.join(java_home, 'bin', 'java.exe')
            if os.path.exists(java_path):
                return java_path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PATH
        import shutil
        java_path = shutil.which('java')
        if java_path:
            return java_path
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Java
        common_paths = [
            "C:\\Program Files\\Java\\jre-*\\bin\\java.exe",
            "C:\\Program Files (x86)\\Java\\jre-*\\bin\\java.exe",
            "C:\\Program Files\\Java\\jdk-*\\bin\\java.exe",
            "C:\\Program Files (x86)\\Java\\jdk-*\\bin\\java.exe",
        ]
        
        for path_pattern in common_paths:
            import glob
            matches = glob.glob(path_pattern)
            if matches:
                return matches[0]
        
        return None

    def log(self, message):
        self.console.insert("end", message + "\n")
        self.console.see("end")

if __name__ == "__main__":
    app = MinecraftLauncher()
    app.mainloop()
